name: Build Cork Windows

# Il workflow parte solo quando premi “Run workflow” nella tab Actions
on: workflow_dispatch

jobs:
  build:
    runs-on: windows-2022

    steps:
      ############################################################
      # 1) Controlla di aver effettivamente clonato il repo principale
      ############################################################
      - name: Checkout source
        uses: actions/checkout@v4

      ############################################################
      # 2) Imposta l’ambiente (MSVC + ClangCL)
      ############################################################
      - name: Set up MSVC env
        uses: ilammy/msvc-dev-cmd@v1
        # Questo step assicura che “cl.exe” e “clang-cl.exe” siano nel PATH

      ############################################################
      # 3) Installa vcpkg e le librerie necessarie
      ############################################################
      - name: Set up vcpkg + dependencies
        run: |
          # Se C:/vcpkg esiste già, lo eliminiamo per partire puliti
          if (Test-Path C:/vcpkg) {
            Remove-Item -Recurse -Force C:/vcpkg
          }

          # Cloniamo vcpkg e lanciamo il bootstrapper
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          # L’opzione -disableMetrics è facoltativa
          C:/vcpkg/bootstrap-vcpkg.bat -disableMetrics

          # Integra vcpkg nell’ambiente (facoltativo, ma consigliato)
          C:/vcpkg/vcpkg integrate install

          # Installiamo le dipendenze di Cork in una sola riga:
          C:/vcpkg/vcpkg install boost:x64-windows mpir:x64-windows tbb:x64-windows eigen3:x64-windows

      ############################################################
      # 4) Configura la build CMake (nessun test, nessun warning→error)
      ############################################################
      - name: Configure (Clang-CL, no tests)
        run: |
          cmake -S . -B build `
                -G "Visual Studio 17 2022" -T ClangCL -A x64 `
                -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake `
                -DCMAKE_CXX_FLAGS="-Wno-error -Wno-macro-redefined" `
                -DCORK_USE_SYSTEM_EIGEN=ON `
                -DCORK_WITH_TESTING=OFF -DBUILD_TESTING=OFF `
                -DCORK_BUILD_UNITTEST=OFF -DCORK_BUILD_REGRESSION=OFF

          # A questo punto, se “CMake Generate done” appare nel log senza errori,
          # significa che CMake ha trovato CMakeLists.txt e ha creato la folder “build/”.

      ############################################################
      # 5) Compila la soluzione in modalità Release
      ############################################################
      - name: Build (Release)
        run: cmake --build build --config Release --parallel
        # Durante questa fase, nel log devono comparire le righe:
        #   “Cork.vcxproj -> C:\...\build\Release\Cork.exe”
        #   seguite da “Build succeeded.”
        #
        # Se invece vedi un errore o non compare “Cork.vcxproj”, allora:
        #   • il progetto non è stato generato correttamente da CMake
        #   • oppure Cork non produce “Cork.exe” (magari si chiama in altro modo).

      ############################################################
      # 6) Carica TUTTI i file dentro build/Release nell’artefatto
      ############################################################
      - name: Upload build/Release contents
        uses: actions/upload-artifact@v4
        with:
          name: cork-exe
          path: build/Release/**
          # Il doppio asterisco (**) include ogni file e sottocartella
          # che CMake ha generato dentro build/Release/.
          #
          # In questo modo, qualunque .exe (Cork.exe, CorkDemo.exe, ecc.)
          # e qualunque DLL generata finiranno nell’ZIP, e potrai estrarli
          # sul tuo PC senza rischi di file mancanti.
